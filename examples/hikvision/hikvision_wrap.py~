#!/usr/bin/env python
# -*- coding: utf-8 -*-
from ctypes import *

class device_info_v30(Structure):
    _fields_ = [
        ('sSerialNumber', c_ubyte*48),
        ('byAlarmInPortNum', c_ubyte),
        ('byAlarmOutPortNum', c_ubyte),
        ('byDiskNum', c_ubyte),
        ('byDVRType', c_ubyte),
        ('byChanNum', c_ubyte),
        ('byStartChan', c_ubyte),
        ('byAudioChanNum', c_ubyte),
        ('byIPChanNum', c_ubyte),
        ('byZeroChanNum', c_ubyte),
        ('byMainProto', c_ubyte),
        ('bySubProto', c_ubyte),
        ('bySupport', c_ubyte),
        ('bySupport1', c_ubyte),
        ('bySupport2', c_ubyte),
        ('wDevType', c_ushort),
        ('bySupport3', c_ubyte),
        ('byMultiStreamProto', c_ubyte),
        ('byStartDChan', c_ubyte),
        ('byStartDTalkChan', c_ubyte),
        ('byHighDChanNum', c_ubyte),
        ('bySupport4', c_ubyte),
        ('byLanguageType', c_ubyte),
        ('byVoiceInChanNum', c_ubyte),
        ('byStartVoiceInChanNo', c_ubyte),
        ('byRes3', c_ubyte*2),
        ('byMirrorChanNum', c_ubyte),
        ('wStartMirrorChanNo', c_ubyte),
        ('byRes2', c_ubyte*2)];

loginresult= CFUNCTYPE(c_void_p, c_long, c_ulong, POINTER(device_info_v30), c_void_p)
#loginresult= WINFUNCTYPE(c_void_p, c_long, c_ulong, POINTER(device_info_v30), c_void_p)
        
class login_info(Structure):
    _fields_ = [('s_DeviceAddress', c_char*129),
                ('byRes1', c_ubyte),
                ('wPort', c_ushort),
                ('sUserName', c_char*64),
                ('sPassword', c_char*64),
                #('cbLoginResult', CFUNCTYPE(c_void_p, c_long, c_longlong, pointer(device_info_v30), c_void_p)),
                ('cbLoginResult', loginresult),
                ('pUser', c_void_p),
                ('bUseAsynLogin', c_bool),
                ('byRes2', c_char*128)];
    def __str__(self):
        return '{0}:{1}:{2}:{3}'.format(self.s_DeviceAddress, self.wPort, self.sUserName, self.sPassword)
class deviceinfo_v40(Structure):
    _fields_ = [('strDeviceV30', device_info_v30),
                ('bySupportLock', c_ubyte),
                ('byRetryLoginTime', c_ubyte),
                ('byPasswordLevel', c_ubyte),
                ('byRes1', c_ubyte),
                ('dwSurplusLockTime', c_ulong),
                ('byRes2', c_ubyte*256)];
    def __str__(self):
        return '{0}{1}'.format(self.strDeviceV30.byIPChanNum, self.byRetryLoginTime)
class time(Structure):
    _fields_ = [('dwYear',c_ulong),
                ('dwMonth',c_ulong),
                ('dwDay',c_ulong),
                ('dwHour',c_ulong),
                ('dwMinute',c_ulong),
                ('dwSecond',c_ulong),];
    def __str__(self):
        return '{0}:{1}{2}{3}{4}{5}'.format(self.dwYear, self.dwMonth, self.dwDay, self.dwHour, self.dwMinute, self.dwSecond)
def load_dll(dll_name):
    dll_handle = CDLL(dll_name)
    b_init = dll_handle.NET_DVR_Init()
    if b_init:
        print("init success")
        return dll_handle
    else:
        print("init fail")

def register_device(device_id, ip, port, user_name, user_pwd):
    """ register a hikvision device"""
    dll_handle.NETDVR_Login
def unregister_device(device_id):
    """ unregister a hikvision device"""

if __name__ == '__main__':
    handle= WinDLL('HCNetSDK')
    b_init = handle.NET_DVR_Init()
    
    print(b_init)
    hik_login_info = login_info()
    hik_device_info = deviceinfo_v40()
    memset(addressof(hik_device_info),0, sizeof(deviceinfo_v40))
    print('devicesize:',sizeof(deviceinfo_v40))
    print('login:',sizeof(login_info))
    memset(addressof(hik_login_info), 0, sizeof(login_info))
    hik_login_info.s_DeviceAddress = '172.16.1.190'
    hik_login_info.wPort = 8000
    hik_login_info.sUserName = 'admin'
    hik_login_info.sPassword = '12345'
    print(hik_login_info)
    #hik_login_info.pUser = 0
    print(handle)
    ip = c_char_p("172.16.1.190")
    port = c_ushort(8000)
    user_name = c_char_p("admin")
    user_pwd = c_char_p("12345")
    #login_ret = handle.NET_DVR_Login_V30(ip, port, user_name, user_pwd, None)
    #print('loginret:',login_ret)
    #login = handle.NET_DVR_Login_V40
    
    #login.argtypes = [POINTER(login_info), POINTER(deviceinfo_v40)]
    #login.restype = c_long
    #login(pointer(hik_login_info), None)
    login_id = handle.NET_DVR_Login_V40(pointer(hik_login_info), pointer(hik_device_info))
    ret = c_void_p()
    channel = c_ulong(0xffffffff)
    tmp_time = time()
    tmp_ret = handle.NET_DVR_GetDVRConfig(login_id, 118, channel, pointer(tmp_time), sizeof(time),ret)
    print('time:',tmp_ret)
    print(tmp_time)
    #login_id = handle.NET_DVR_Login_V40(None, None)
    #error_code = handle.NET_DVR_GetLastError()
    #print(error_code)
    print('longid:', login_id)
    print(hik_device_info)



