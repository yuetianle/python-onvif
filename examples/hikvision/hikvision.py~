#!/usr/bin/env python
# -*- coding: utf-8 -*-
import device_plugins_hikvision
import logging
import inspect
from urlobject import URLObject

# 使用一个名字为fib的logger
logger = logging.getLogger('onvif_host')

# 设置logger的level为DEBUG
logger.setLevel(logging.DEBUG)
#logger.setLevel(logging.WARN)

# 创建一个输出日志到控制台的StreamHandler
hdr = logging.StreamHandler()
formatter = logging.Formatter('[%(asctime)s] [%(levelname)s] [%(name)s] [%(filename)s:%(funcName)s:%(lineno)s] : %(message)s')
hdr.setFormatter(formatter)
# 给logger添加上handler
logger.addHandler(hdr)

class hikvision_host(object):
    """hikvision host"""
    def __init__(self, uri, params, device_id):
        """ init function """
        self.uri = uri
        self.params = params
        self.device_id = device_id

class uri_parser():
    """uri parser"""
    def __init__(self, uri):
        """init function"""
        self.uri = URLObject(uri)
        self.params = self.uri.query.dict
    def user_name(self):
        return self.uri.username
    def password(self):
        return self.uri.password
    def ip(self):
        return self.uri.hostname
    def port(self):
        return self.uri.port
    def add_func_param(self, param):
        self.params.update(param)
    def func_name(self, name):
        query = self.uri.query.dict
        
        if query.has_key(name):
            return query[name]
        else:
            return ''
    def func_params(self, name):
        
        query = self.uri.query.dict
        if query[name] == 'register_device':
            self.add_func_param({'device_ip':self.uri.hostname})
            self.add_func_param({'device_port':self.uri.port})
            self.add_func_param({'device_name':'aa'})
            self.add_func_param({'user_name':self.uri.username})
            self.add_func_param({'user_pwd':self.uri.password})
        self.params.pop(name)
        return self.params

def request_hikvision_cmd(device_id, uri, params, out_params, out_params_len):
    """device cmd"""
    #dev_id = 
    func_lists = dir(device_plugins_hikvision)
    parser = uri_parser(uri)
    parser.add_func_param({'device_id':device_id})
    print('func_name', parser.func_params('func'))
    func_name = parser.func_name('func')
    if func_name in func_lists:
        cmd_func = getattr(device_plugins_hikvision, func_name)
        cmd_params = parser.func_params('func')
        cmd_func(**cmd_params)
        print(inspect.isfunction(cmd_func))
        print(cmd_func)
        #print("%s", inspect.getargspec(cmd_func))
    print(func_lists)
if __name__ == '__main__':
    test_parser = uri_parser("http://admin:12345@172.16.1.221:8000/device/meida?func=register_device&device_manufacture=5&device_type=0")
    print('user:', test_parser.user_name())
    print('pwd:', test_parser.password())
    print('func_name', test_parser.func_name('func'))
    print('func_params', test_parser.func_params('func'))
    print('ip', test_parser.ip())
    print('port', test_parser.port())
    out_data = list()
    out_params_len = long()
    request_hikvision_cmd('111', "http://admin:12345@172.16.1.221:8000/device/meida?func=register_device&device_manufacture=5&device_type=0", '', out_data, out_params_len)
